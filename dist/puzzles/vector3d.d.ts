export declare class Vector3D {
    x: number;
    y: number;
    z: number;
    private isConstant;
    constructor(x?: number, y?: number, z?: number, isConstant?: boolean);
    static cross(a: Vector3D, b: Vector3D, c: Vector3D): Vector3D;
    static crossValue(a: Vector3D, b: Vector3D, c: Vector3D): number;
    static direction(p1: Vector3D, p2: Vector3D, p3: Vector3D, vec: Vector3D): -1 | 0 | 1;
    static direction1(anchor: Vector3D, u: Vector3D, pt: Vector3D): -1 | 0 | 1;
    static project(pt: Vector3D, a: Vector3D, b: Vector3D, c: Vector3D): Vector3D;
    static project1(pt: Vector3D, a: Vector3D, u: Vector3D): Vector3D;
    setConstant(cnt: boolean): void;
    project(a: Vector3D, b: Vector3D, c: Vector3D): Vector3D;
    project1(a: Vector3D, u: Vector3D): Vector3D;
    reflect(a: Vector3D, b: Vector3D, c: Vector3D, self?: boolean): Vector3D;
    reflect1(a: Vector3D, u: Vector3D, self?: boolean): Vector3D;
    cross(v: Vector3D): Vector3D;
    dot(v: Vector3D): number;
    add(v: Vector3D, self?: boolean): Vector3D;
    sub(v: Vector3D, self?: boolean): Vector3D;
    mul(f: number, self?: boolean): Vector3D;
    div(f: number, self?: boolean): Vector3D;
    rotate(O: Vector3D, u: Vector3D, ang: number, self?: boolean): Vector3D;
    clone(): Vector3D;
    abs(): number;
    abs2(): number;
    unit(): Vector3D;
    proj(a: Vector3D): Vector3D;
    setLength(n: number): Vector3D;
    toString(): string;
    toNormal(): Vector3D;
    setCoords(x: number, y: number, z: number): void;
    equals(v: Vector3D): boolean;
}
export declare const CENTER: Vector3D;
export declare const RIGHT: Vector3D;
export declare const LEFT: Vector3D;
export declare const FRONT: Vector3D;
export declare const BACK: Vector3D;
export declare const UP: Vector3D;
export declare const DOWN: Vector3D;
